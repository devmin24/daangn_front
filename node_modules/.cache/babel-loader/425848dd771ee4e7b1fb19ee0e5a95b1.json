{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { Ref } from '@fluentui/react-component-ref';\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, useClassNamesOnNode, useKeyOnly } from '../../lib';\n/**\n * A modal has a dimmer.\n */\n\nfunction ModalDimmer(props) {\n  var blurring = props.blurring,\n      children = props.children,\n      className = props.className,\n      centered = props.centered,\n      content = props.content,\n      inverted = props.inverted,\n      mountNode = props.mountNode,\n      scrolling = props.scrolling;\n  var ref = React.useRef();\n  var classes = cx('ui', useKeyOnly(inverted, 'inverted'), useKeyOnly(!centered, 'top aligned'), 'page modals dimmer transition visible active', className);\n  var bodyClasses = cx('dimmable dimmed', useKeyOnly(blurring, 'blurring'), useKeyOnly(scrolling, 'scrolling'));\n  var rest = getUnhandledProps(ModalDimmer, props);\n  var ElementType = getElementType(ModalDimmer, props);\n  useClassNamesOnNode(mountNode, bodyClasses);\n  React.useEffect(function () {\n    if (ref.current && ref.current.style) {\n      ref.current.style.setProperty('display', 'flex', 'important');\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(Ref, {\n    innerRef: ref\n  }, /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children));\n}\n\nModalDimmer.handledProps = [\"as\", \"blurring\", \"centered\", \"children\", \"className\", \"content\", \"inverted\", \"mountNode\", \"scrolling\"];\nModalDimmer.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A dimmer can be blurred. */\n  blurring: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A dimmer can center its contents in the viewport. */\n  centered: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A dimmer can be inverted. */\n  inverted: PropTypes.bool,\n\n  /** The node where the modal should mount. Defaults to document.body. */\n  mountNode: PropTypes.any,\n\n  /** A dimmer can make body scrollable. */\n  scrolling: PropTypes.bool\n} : {};\nModalDimmer.create = createShorthandFactory(ModalDimmer, function (content) {\n  return {\n    content: content\n  };\n});\nexport default ModalDimmer;","map":{"version":3,"sources":["/Users/parkminkyung/sparta_react/daangnmarket/node_modules/semantic-ui-react/dist/es/modules/Modal/ModalDimmer.js"],"names":["_extends","Ref","cx","PropTypes","React","childrenUtils","createShorthandFactory","customPropTypes","getElementType","getUnhandledProps","useClassNamesOnNode","useKeyOnly","ModalDimmer","props","blurring","children","className","centered","content","inverted","mountNode","scrolling","ref","useRef","classes","bodyClasses","rest","ElementType","useEffect","current","style","setProperty","createElement","innerRef","isNil","handledProps","propTypes","process","env","NODE_ENV","as","elementType","bool","node","string","contentShorthand","any","create"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { Ref } from '@fluentui/react-component-ref';\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, useClassNamesOnNode, useKeyOnly } from '../../lib';\n/**\n * A modal has a dimmer.\n */\n\nfunction ModalDimmer(props) {\n  var blurring = props.blurring,\n      children = props.children,\n      className = props.className,\n      centered = props.centered,\n      content = props.content,\n      inverted = props.inverted,\n      mountNode = props.mountNode,\n      scrolling = props.scrolling;\n  var ref = React.useRef();\n  var classes = cx('ui', useKeyOnly(inverted, 'inverted'), useKeyOnly(!centered, 'top aligned'), 'page modals dimmer transition visible active', className);\n  var bodyClasses = cx('dimmable dimmed', useKeyOnly(blurring, 'blurring'), useKeyOnly(scrolling, 'scrolling'));\n  var rest = getUnhandledProps(ModalDimmer, props);\n  var ElementType = getElementType(ModalDimmer, props);\n  useClassNamesOnNode(mountNode, bodyClasses);\n  React.useEffect(function () {\n    if (ref.current && ref.current.style) {\n      ref.current.style.setProperty('display', 'flex', 'important');\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(Ref, {\n    innerRef: ref\n  }, /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children));\n}\n\nModalDimmer.handledProps = [\"as\", \"blurring\", \"centered\", \"children\", \"className\", \"content\", \"inverted\", \"mountNode\", \"scrolling\"];\nModalDimmer.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A dimmer can be blurred. */\n  blurring: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A dimmer can center its contents in the viewport. */\n  centered: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A dimmer can be inverted. */\n  inverted: PropTypes.bool,\n\n  /** The node where the modal should mount. Defaults to document.body. */\n  mountNode: PropTypes.any,\n\n  /** A dimmer can make body scrollable. */\n  scrolling: PropTypes.bool\n} : {};\nModalDimmer.create = createShorthandFactory(ModalDimmer, function (content) {\n  return {\n    content: content\n  };\n});\nexport default ModalDimmer;"]},"metadata":{},"sourceType":"module"}