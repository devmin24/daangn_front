{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\"; // 불변성 관리 위한 친구\n\nimport { produce } from \"immer\"; // import { setCookie, getCookie, deleteCookie } from \"../../shared/Cookie\";\n\nimport axios from \"axios\"; // actions\n//const LOG_IN = \"LOG_IN\";\n\nconst SIGN_UP = \"SIGN_UP\";\nconst LOG_OUT = \"LOG_OUT\";\nconst GET_USER = \"GET_USER\";\nconst SET_USER = \"SET_USER\"; // initialState\n\nconst initialState = {\n  user: null,\n  is_login: false //signup: null,\n\n};\nconst user_initial = {\n  user_name: \"anna\"\n}; // middleware actions\n\nconst loginInfo = [];\n\nconst loginAction = user => {// return function (dispatch, getState, { history }) {\n  //   console.log(history);\n  //   dispatch(setUser(user));\n  //   //실험\n  //   loginInfo.push(user);\n  //   console.log(loginInfo);\n  //   history.push(\"/\");\n  // };\n};\n\nconst loginDB = (id, pwd) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    axios({\n      method: \"POST\",\n      url: \"http://54.180.112.53:8080/api/authenticate\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json;charset=UTF-8\"\n      },\n      data: {\n        username: id,\n        password: pwd\n      }\n    }).then(res => {\n      console.log(res);\n      localStorage.setItem(\"nick\", JSON.stringify(`${id}`));\n      sessionStorage.setItem(\"token\", res.data.token);\n      dispatch(setUser({\n        username: id,\n        password: pwd\n      }));\n      history.push(\"/\");\n      window.alert(\"정상적으로 로그인 되었습니다!\");\n    }).catch(err => {\n      window.alert(\"로그인에 실패하였습니다!\");\n    });\n  };\n}; // 회원가입DB\n\n\nconst signupDB = (id, pwd, nickname) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    axios({\n      method: \"POST\",\n      url: \"http://54.180.112.53:8080/api/signup\",\n      data: {\n        username: id,\n        nickname: nickname,\n        password: pwd\n      }\n    }).then(res => {\n      //console 찍어보기 res\n      console.log(\"이건 signupDB 함수야!\");\n      window.location.href = \"/\";\n      window.alert(\"회원가입을 축하드립니다!\");\n    }).catch(err => {\n      window.alert(\"회원가입에 실패했습니다\", err);\n    });\n  };\n};\n\nconst loginCheckDB = is_session => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    if (is_session) {\n      dispatch(setUser({\n        nickname: localStorage.getItem(\"nickname\")\n      }));\n    } else {\n      dispatch(logOut());\n    }\n  };\n};\n\nconst logOutDB = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    sessionStorage.removeItem(\"token\");\n    localStorage.removeItem(\"nick\");\n    dispatch(logOut());\n    history.replace(\"/\");\n  };\n}; // actionCreators\n//const logIn = createAction(LOG_IN, (user) => ({ user }));\n\n\nconst logOut = createAction(LOG_OUT, user => ({\n  user\n}));\nconst getUser = createAction(GET_USER, user => ({\n  user\n}));\nconst setUser = createAction(SET_USER, user => ({\n  user\n}));\nconst signUp = createAction(SIGN_UP, (id, pwd) => ({\n  id,\n  pwd\n})); // reducer\n\nexport default handleActions({\n  [SET_USER]: (state, action) => produce(state, draft => {\n    draft.user = action.payload.user;\n    draft.is_login = true;\n  }),\n  [SIGN_UP]: (state, action) => produce(state, draft => {\n    draft.user.push(action.payload.user);\n    draft.is_login = true;\n  }),\n  [LOG_OUT]: (state, action) => produce(state, draft => {\n    draft.user = null;\n    draft.is_login = false;\n  }),\n  [GET_USER]: (state, action) => produce(state, draft => {})\n}, initialState); // action creator export\n\nconst actionCreators = {\n  //logIn,\n  loginAction,\n  logOut,\n  signUp,\n  setUser,\n  getUser,\n  signupDB,\n  loginDB,\n  loginCheckDB,\n  logOutDB\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/parkminkyung/sparta_react/daangnmarket/src/redux/modules/user.js"],"names":["createAction","handleActions","produce","axios","SIGN_UP","LOG_OUT","GET_USER","SET_USER","initialState","user","is_login","user_initial","user_name","loginInfo","loginAction","loginDB","id","pwd","dispatch","getState","history","method","url","headers","Accept","data","username","password","then","res","console","log","localStorage","setItem","JSON","stringify","sessionStorage","token","setUser","push","window","alert","catch","err","signupDB","nickname","location","href","loginCheckDB","is_session","getItem","logOut","logOutDB","removeItem","replace","getUser","signUp","state","action","draft","payload","actionCreators"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C,C,CACA;;AACA,SAASC,OAAT,QAAwB,OAAxB,C,CACA;;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;AACA;;AACA,MAAMC,OAAO,GAAG,SAAhB;AACA,MAAMC,OAAO,GAAG,SAAhB;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,QAAQ,GAAG,UAAjB,C,CAEA;;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,IADa;AAEnBC,EAAAA,QAAQ,EAAE,KAFS,CAGnB;;AAHmB,CAArB;AAMA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE;AADQ,CAArB,C,CAIA;;AACA,MAAMC,SAAS,GAAG,EAAlB;;AAEA,MAAMC,WAAW,GAAIL,IAAD,IAAU,CAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CATD;;AAWA,MAAMM,OAAO,GAAG,CAACC,EAAD,EAAKC,GAAL,KAAa;AAC3B,SAAO,UAAUC,QAAV,EAAoBC,QAApB,EAA8B;AAAEC,IAAAA;AAAF,GAA9B,EAA2C;AAChDjB,IAAAA,KAAK,CAAC;AACJkB,MAAAA,MAAM,EAAE,MADJ;AAEJC,MAAAA,GAAG,EAAE,4CAFD;AAGJC,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE,kBADD;AAEP,wBAAgB;AAFT,OAHL;AAOJC,MAAAA,IAAI,EAAE;AACJC,QAAAA,QAAQ,EAAEV,EADN;AAEJW,QAAAA,QAAQ,EAAEV;AAFN;AAPF,KAAD,CAAL,CAYGW,IAZH,CAYSC,GAAD,IAAS;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAG,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAgB,GAAEnB,EAAG,EAArB,CAA7B;AACAoB,MAAAA,cAAc,CAACH,OAAf,CAAuB,OAAvB,EAAgCJ,GAAG,CAACJ,IAAJ,CAASY,KAAzC;AACAnB,MAAAA,QAAQ,CACNoB,OAAO,CAAC;AACNZ,QAAAA,QAAQ,EAAEV,EADJ;AAENW,QAAAA,QAAQ,EAAEV;AAFJ,OAAD,CADD,CAAR;AAMAG,MAAAA,OAAO,CAACmB,IAAR,CAAa,GAAb;AACAC,MAAAA,MAAM,CAACC,KAAP,CAAa,kBAAb;AACD,KAxBH,EAyBGC,KAzBH,CAyBUC,GAAD,IAAS;AACdH,MAAAA,MAAM,CAACC,KAAP,CAAa,eAAb;AACD,KA3BH;AA4BD,GA7BD;AA8BD,CA/BD,C,CAiCA;;;AAEA,MAAMG,QAAQ,GAAG,CAAC5B,EAAD,EAAKC,GAAL,EAAU4B,QAAV,KAAuB;AACtC,SAAO,UAAU3B,QAAV,EAAoBC,QAApB,EAA8B;AAAEC,IAAAA;AAAF,GAA9B,EAA2C;AAChDjB,IAAAA,KAAK,CAAC;AACJkB,MAAAA,MAAM,EAAE,MADJ;AAEJC,MAAAA,GAAG,EAAE,sCAFD;AAGJG,MAAAA,IAAI,EAAE;AACJC,QAAAA,QAAQ,EAAEV,EADN;AAEJ6B,QAAAA,QAAQ,EAAEA,QAFN;AAGJlB,QAAAA,QAAQ,EAAEV;AAHN;AAHF,KAAD,CAAL,CASGW,IATH,CASSC,GAAD,IAAS;AACb;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAS,MAAAA,MAAM,CAACM,QAAP,CAAgBC,IAAhB,GAAuB,GAAvB;AACAP,MAAAA,MAAM,CAACC,KAAP,CAAa,eAAb;AACD,KAdH,EAeGC,KAfH,CAeUC,GAAD,IAAS;AACdH,MAAAA,MAAM,CAACC,KAAP,CAAa,cAAb,EAA6BE,GAA7B;AACD,KAjBH;AAkBD,GAnBD;AAoBD,CArBD;;AAuBA,MAAMK,YAAY,GAAIC,UAAD,IAAgB;AACnC,SAAO,UAAU/B,QAAV,EAAoBC,QAApB,EAA8B;AAAEC,IAAAA;AAAF,GAA9B,EAA2C;AAChD,QAAI6B,UAAJ,EAAgB;AACd/B,MAAAA,QAAQ,CAACoB,OAAO,CAAC;AAAEO,QAAAA,QAAQ,EAAEb,YAAY,CAACkB,OAAb,CAAqB,UAArB;AAAZ,OAAD,CAAR,CAAR;AACD,KAFD,MAEO;AACLhC,MAAAA,QAAQ,CAACiC,MAAM,EAAP,CAAR;AACD;AACF,GAND;AAOD,CARD;;AAUA,MAAMC,QAAQ,GAAG,MAAM;AACrB,SAAO,UAAUlC,QAAV,EAAoBC,QAApB,EAA8B;AAAEC,IAAAA;AAAF,GAA9B,EAA2C;AAChDgB,IAAAA,cAAc,CAACiB,UAAf,CAA0B,OAA1B;AACArB,IAAAA,YAAY,CAACqB,UAAb,CAAwB,MAAxB;AACAnC,IAAAA,QAAQ,CAACiC,MAAM,EAAP,CAAR;AACA/B,IAAAA,OAAO,CAACkC,OAAR,CAAgB,GAAhB;AACD,GALD;AAMD,CAPD,C,CASA;AAEA;;;AACA,MAAMH,MAAM,GAAGnD,YAAY,CAACK,OAAD,EAAWI,IAAD,KAAW;AAAEA,EAAAA;AAAF,CAAX,CAAV,CAA3B;AACA,MAAM8C,OAAO,GAAGvD,YAAY,CAACM,QAAD,EAAYG,IAAD,KAAW;AAAEA,EAAAA;AAAF,CAAX,CAAX,CAA5B;AACA,MAAM6B,OAAO,GAAGtC,YAAY,CAACO,QAAD,EAAYE,IAAD,KAAW;AAAEA,EAAAA;AAAF,CAAX,CAAX,CAA5B;AACA,MAAM+C,MAAM,GAAGxD,YAAY,CAACI,OAAD,EAAU,CAACY,EAAD,EAAKC,GAAL,MAAc;AAAED,EAAAA,EAAF;AAAMC,EAAAA;AAAN,CAAd,CAAV,CAA3B,C,CAEA;;AAEA,eAAehB,aAAa,CAC1B;AACE,GAACM,QAAD,GAAY,CAACkD,KAAD,EAAQC,MAAR,KACVxD,OAAO,CAACuD,KAAD,EAASE,KAAD,IAAW;AACxBA,IAAAA,KAAK,CAAClD,IAAN,GAAaiD,MAAM,CAACE,OAAP,CAAenD,IAA5B;AACAkD,IAAAA,KAAK,CAACjD,QAAN,GAAiB,IAAjB;AACD,GAHM,CAFX;AAOE,GAACN,OAAD,GAAW,CAACqD,KAAD,EAAQC,MAAR,KACTxD,OAAO,CAACuD,KAAD,EAASE,KAAD,IAAW;AACxBA,IAAAA,KAAK,CAAClD,IAAN,CAAW8B,IAAX,CAAgBmB,MAAM,CAACE,OAAP,CAAenD,IAA/B;AACAkD,IAAAA,KAAK,CAACjD,QAAN,GAAiB,IAAjB;AACD,GAHM,CARX;AAaE,GAACL,OAAD,GAAW,CAACoD,KAAD,EAAQC,MAAR,KACTxD,OAAO,CAACuD,KAAD,EAASE,KAAD,IAAW;AACxBA,IAAAA,KAAK,CAAClD,IAAN,GAAa,IAAb;AACAkD,IAAAA,KAAK,CAACjD,QAAN,GAAiB,KAAjB;AACD,GAHM,CAdX;AAmBE,GAACJ,QAAD,GAAY,CAACmD,KAAD,EAAQC,MAAR,KAAmBxD,OAAO,CAACuD,KAAD,EAASE,KAAD,IAAW,CAAE,CAArB;AAnBxC,CAD0B,EAsB1BnD,YAtB0B,CAA5B,C,CAyBA;;AAEA,MAAMqD,cAAc,GAAG;AACrB;AACA/C,EAAAA,WAFqB;AAGrBqC,EAAAA,MAHqB;AAIrBK,EAAAA,MAJqB;AAKrBlB,EAAAA,OALqB;AAMrBiB,EAAAA,OANqB;AAOrBX,EAAAA,QAPqB;AAQrB7B,EAAAA,OARqB;AASrBiC,EAAAA,YATqB;AAUrBI,EAAAA;AAVqB,CAAvB;AAaA,SAASS,cAAT","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\r\n// 불변성 관리 위한 친구\r\nimport { produce } from \"immer\";\r\n// import { setCookie, getCookie, deleteCookie } from \"../../shared/Cookie\";\r\nimport axios from \"axios\";\r\n\r\n// actions\r\n//const LOG_IN = \"LOG_IN\";\r\nconst SIGN_UP = \"SIGN_UP\";\r\nconst LOG_OUT = \"LOG_OUT\";\r\nconst GET_USER = \"GET_USER\";\r\nconst SET_USER = \"SET_USER\";\r\n\r\n// initialState\r\n\r\nconst initialState = {\r\n  user: null,\r\n  is_login: false,\r\n  //signup: null,\r\n};\r\n\r\nconst user_initial = {\r\n  user_name: \"anna\",\r\n};\r\n\r\n// middleware actions\r\nconst loginInfo = [];\r\n\r\nconst loginAction = (user) => {\r\n  // return function (dispatch, getState, { history }) {\r\n  //   console.log(history);\r\n  //   dispatch(setUser(user));\r\n  //   //실험\r\n  //   loginInfo.push(user);\r\n  //   console.log(loginInfo);\r\n  //   history.push(\"/\");\r\n  // };\r\n};\r\n\r\nconst loginDB = (id, pwd) => {\r\n  return function (dispatch, getState, { history }) {\r\n    axios({\r\n      method: \"POST\",\r\n      url: \"http://54.180.112.53:8080/api/authenticate\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json;charset=UTF-8\",\r\n      },\r\n      data: {\r\n        username: id,\r\n        password: pwd,\r\n      },\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        localStorage.setItem(\"nick\", JSON.stringify(`${id}`));\r\n        sessionStorage.setItem(\"token\", res.data.token);\r\n        dispatch(\r\n          setUser({\r\n            username: id,\r\n            password: pwd,\r\n          })\r\n        );\r\n        history.push(\"/\");\r\n        window.alert(\"정상적으로 로그인 되었습니다!\");\r\n      })\r\n      .catch((err) => {\r\n        window.alert(\"로그인에 실패하였습니다!\");\r\n      });\r\n  };\r\n};\r\n\r\n// 회원가입DB\r\n\r\nconst signupDB = (id, pwd, nickname) => {\r\n  return function (dispatch, getState, { history }) {\r\n    axios({\r\n      method: \"POST\",\r\n      url: \"http://54.180.112.53:8080/api/signup\",\r\n      data: {\r\n        username: id,\r\n        nickname: nickname,\r\n        password: pwd,\r\n      },\r\n    })\r\n      .then((res) => {\r\n        //console 찍어보기 res\r\n        console.log(\"이건 signupDB 함수야!\");\r\n        window.location.href = \"/\";\r\n        window.alert(\"회원가입을 축하드립니다!\");\r\n      })\r\n      .catch((err) => {\r\n        window.alert(\"회원가입에 실패했습니다\", err);\r\n      });\r\n  };\r\n};\r\n\r\nconst loginCheckDB = (is_session) => {\r\n  return function (dispatch, getState, { history }) {\r\n    if (is_session) {\r\n      dispatch(setUser({ nickname: localStorage.getItem(\"nickname\") }));\r\n    } else {\r\n      dispatch(logOut());\r\n    }\r\n  };\r\n};\r\n\r\nconst logOutDB = () => {\r\n  return function (dispatch, getState, { history }) {\r\n    sessionStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"nick\");\r\n    dispatch(logOut());\r\n    history.replace(\"/\");\r\n  };\r\n};\r\n\r\n// actionCreators\r\n\r\n//const logIn = createAction(LOG_IN, (user) => ({ user }));\r\nconst logOut = createAction(LOG_OUT, (user) => ({ user }));\r\nconst getUser = createAction(GET_USER, (user) => ({ user }));\r\nconst setUser = createAction(SET_USER, (user) => ({ user }));\r\nconst signUp = createAction(SIGN_UP, (id, pwd) => ({ id, pwd }));\r\n\r\n// reducer\r\n\r\nexport default handleActions(\r\n  {\r\n    [SET_USER]: (state, action) =>\r\n      produce(state, (draft) => {\r\n        draft.user = action.payload.user;\r\n        draft.is_login = true;\r\n      }),\r\n\r\n    [SIGN_UP]: (state, action) =>\r\n      produce(state, (draft) => {\r\n        draft.user.push(action.payload.user);\r\n        draft.is_login = true;\r\n      }),\r\n\r\n    [LOG_OUT]: (state, action) =>\r\n      produce(state, (draft) => {\r\n        draft.user = null;\r\n        draft.is_login = false;\r\n      }),\r\n\r\n    [GET_USER]: (state, action) => produce(state, (draft) => {}),\r\n  },\r\n  initialState\r\n);\r\n\r\n// action creator export\r\n\r\nconst actionCreators = {\r\n  //logIn,\r\n  loginAction,\r\n  logOut,\r\n  signUp,\r\n  setUser,\r\n  getUser,\r\n  signupDB,\r\n  loginDB,\r\n  loginCheckDB,\r\n  logOutDB,\r\n};\r\n\r\nexport { actionCreators };\r\n"]},"metadata":{},"sourceType":"module"}