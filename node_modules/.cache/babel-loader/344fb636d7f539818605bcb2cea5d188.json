{"ast":null,"code":"import _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { handleRef } from './utils'; // ========================================================\n// react/packages/react-reconciler/src/ReactFiber.js\n// ========================================================\n\n/**\n * Detects if a passed element is a Fiber object instead of an element. Is needed as `ReactDOM.findDOMNode()` returns\n * a Fiber in `react-test-renderer` that can cause issues with tests. Is used only in non-production env.\n *\n * @see https://github.com/facebook/react/issues/7371#issuecomment-317396864\n * @see https://github.com/Semantic-Org/Semantic-UI-React/issues/4061#issuecomment-694895617\n */\n\nfunction isFiberRef(node) {\n  if (node === null) {\n    return false;\n  }\n\n  if (node instanceof Element || node instanceof Text) {\n    return false;\n  }\n\n  return !!(node.type && node.tag);\n}\n\nexport var RefFindNode = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(RefFindNode, _React$Component);\n\n  function RefFindNode() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.prevNode = null;\n    return _this;\n  }\n\n  var _proto = RefFindNode.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var currentNode = ReactDOM.findDOMNode(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFiberRef(currentNode)) {\n        currentNode = null;\n      }\n    }\n\n    this.prevNode = currentNode;\n    handleRef(this.props.innerRef, currentNode);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var currentNode = ReactDOM.findDOMNode(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFiberRef(currentNode)) {\n        currentNode = null;\n      }\n    }\n\n    if (this.prevNode !== currentNode) {\n      this.prevNode = currentNode;\n      handleRef(this.props.innerRef, currentNode);\n    }\n\n    if (prevProps.innerRef !== this.props.innerRef) {\n      handleRef(this.props.innerRef, currentNode);\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    handleRef(this.props.innerRef, null);\n    delete this.prevNode;\n  };\n\n  _proto.render = function render() {\n    var children = this.props.children;\n    return children;\n  };\n\n  return RefFindNode;\n}(React.Component);","map":{"version":3,"sources":["RefFindNode.tsx"],"names":["node","RefFindNode","React","componentDidMount","currentNode","ReactDOM","process","isFiberRef","handleRef","componentDidUpdate","prevProps","componentWillUnmount","render","children"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport { handleRef, RefProps } from './utils';\n\n// ========================================================\n// react/packages/react-reconciler/src/ReactFiber.js\n// ========================================================\n\ntype Fiber = {\n  // Tag identifying the type of fiber.\n  tag: string;\n  // The resolved function/class/ associated with this fiber.\n  type: any;\n};\n\n/**\n * Detects if a passed element is a Fiber object instead of an element. Is needed as `ReactDOM.findDOMNode()` returns\n * a Fiber in `react-test-renderer` that can cause issues with tests. Is used only in non-production env.\n *\n * @see https://github.com/facebook/react/issues/7371#issuecomment-317396864\n * @see https://github.com/Semantic-Org/Semantic-UI-React/issues/4061#issuecomment-694895617\n */\nfunction isFiberRef(node: Element | Fiber | Text | null): boolean {\n  if (node === null) {\n    return false;\n  }\n\n  if (node instanceof Element || node instanceof Text) {\n    return false;\n  }\n\n  return !!(node.type && node.tag);\n}\n\nexport class RefFindNode extends React.Component<RefProps> {\n  prevNode: Node | null = null;\n\n  componentDidMount() {\n    let currentNode = ReactDOM.findDOMNode(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFiberRef(currentNode)) {\n        currentNode = null;\n      }\n    }\n\n    this.prevNode = currentNode;\n    handleRef(this.props.innerRef, currentNode);\n  }\n\n  componentDidUpdate(prevProps: RefProps) {\n    let currentNode = ReactDOM.findDOMNode(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFiberRef(currentNode)) {\n        currentNode = null;\n      }\n    }\n\n    if (this.prevNode !== currentNode) {\n      this.prevNode = currentNode;\n      handleRef(this.props.innerRef, currentNode);\n    }\n\n    if (prevProps.innerRef !== this.props.innerRef) {\n      handleRef(this.props.innerRef, currentNode);\n    }\n  }\n\n  componentWillUnmount() {\n    handleRef(this.props.innerRef, null);\n\n    delete this.prevNode;\n  }\n\n  render() {\n    const { children } = this.props;\n\n    return children;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}