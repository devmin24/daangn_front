{"ast":null,"code":"import * as React from 'react';\n\nvar isActionSupported = function isActionSupported(element, method) {\n  return element ? !!element[method] : false;\n};\n\nexport var useEventListener = function useEventListener(options) {\n  var capture = options.capture,\n      listener = options.listener,\n      type = options.type,\n      target = options.target,\n      targetRef = options.targetRef;\n  var latestListener = React.useRef(listener);\n  latestListener.current = listener;\n  var eventHandler = React.useCallback(function (event) {\n    return latestListener.current(event);\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // This is fine to violate there conditional rule as environment variables will never change during component\n    // lifecycle\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(function () {\n      if (typeof target !== 'undefined' && typeof targetRef !== 'undefined') {\n        throw new Error('`target` and `targetRef` props are mutually exclusive, please use one of them.');\n      }\n\n      if (typeof target === 'undefined' && typeof targetRef === 'undefined') {\n        throw new Error(\"`target` and `targetRef` props are `undefined`, it' required to use one of them.\");\n      }\n    }, [target, targetRef]);\n  }\n\n  React.useEffect(function () {\n    var element = typeof targetRef === 'undefined' ? target : targetRef.current; // Store the current event to avoid triggering handlers immediately\n    // Note this depends on a deprecated but extremely well supported quirk of the web platform\n    // https://github.com/facebook/react/issues/20074\n\n    var currentEvent = window.event;\n\n    var conditionalHandler = function conditionalHandler(event) {\n      // Skip if this event is the same as the one running when we added the handlers\n      if (event === currentEvent) {\n        currentEvent = undefined;\n        return;\n      }\n\n      eventHandler(event);\n    };\n\n    if (isActionSupported(element, 'addEventListener')) {\n      element.addEventListener(type, conditionalHandler, capture);\n    } else if (process.env.NODE_ENV !== 'production') {\n      throw new Error('@fluentui/react-component-event-listener: Passed `element` is not valid or does not support `addEventListener()` method.');\n    }\n\n    return function () {\n      if (isActionSupported(element, 'removeEventListener')) {\n        element.removeEventListener(type, conditionalHandler, capture);\n      } else if (process.env.NODE_ENV !== 'production') {\n        throw new Error('@fluentui/react-component-event-listener: Passed `element` is not valid or does not support `removeEventListener()` method.');\n      }\n    };\n  }, [capture, eventHandler, target, targetRef, type]);\n};","map":{"version":3,"sources":["useEventListener.ts"],"names":["isActionSupported","element","useEventListener","capture","listener","type","target","targetRef","options","latestListener","React","eventHandler","process","currentEvent","window","conditionalHandler","event"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;AAIA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,OAAA,EAAA,MAAA,EAAA;AAAA,SAGDC,OAAO,GAAG,CAAC,CAACA,OAAO,CAAZ,MAAY,CAAZ,GAHN,KAAA;AAA1B,CAAA;;AAKA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,OAAA,EAAkE;AAAA,MACxFC,OADwF,GACzCK,OADyC,CAAA,OAAA;AAAA,MAC/EJ,QAD+E,GACzCI,OADyC,CAAA,QAAA;AAAA,MACrEH,IADqE,GACzCG,OADyC,CAAA,IAAA;AAAA,MAC/DF,MAD+D,GACzCE,OADyC,CAAA,MAAA;AAAA,MACvDD,SADuD,GACzCC,OADyC,CAAA,SAAA;AAGhG,MAAMC,cAAc,GAAGC,KAAK,CAALA,MAAAA,CAAvB,QAAuBA,CAAvB;AACAD,EAAAA,cAAc,CAAdA,OAAAA,GAAAA,QAAAA;AAEA,MAAME,YAAY,GAAG,KAAK,CAAL,WAAA,CAAkB,UAAA,KAAA,EAAgC;AACrE,WAAOF,cAAc,CAAdA,OAAAA,CAAP,KAAOA,CAAP;AADmB,GAAA,EAArB,EAAqB,CAArB;;AAIA,MAAIG,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAJ,YAAA,EAA2C;AACzC;AACA;AACA;AACAF,IAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,UAAI,OAAA,MAAA,KAAA,WAAA,IAAiC,OAAA,SAAA,KAArC,WAAA,EAAuE;AACrE,cAAM,IAAA,KAAA,CAAN,gFAAM,CAAN;AACD;;AAED,UAAI,OAAA,MAAA,KAAA,WAAA,IAAiC,OAAA,SAAA,KAArC,WAAA,EAAuE;AACrE,cAAM,IAAA,KAAA,CAAN,kFAAM,CAAN;AACD;AAPHA,KAAAA,EAQG,CAAA,MAAA,EARHA,SAQG,CARHA;AASD;;AAEDA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,QAAMT,OAAkC,GAAG,OAAA,SAAA,KAAA,WAAA,GAAA,MAAA,GAA4CM,SAAS,CAD5E,OACpB,CADoB,CAGpB;AACA;AACA;;AACA,QAAIM,YAAY,GAAGC,MAAM,CAAzB,KAAA;;AAEA,QAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAA,KAAA,EAAgC;AACzD;AACA,UAAIC,KAAK,KAAT,YAAA,EAA4B;AAC1BH,QAAAA,YAAY,GAAZA,SAAAA;AACA;AACD;;AAEDF,MAAAA,YAAY,CAAZA,KAAY,CAAZA;AAPF,KAAA;;AAUA,QAAIX,iBAAiB,CAAA,OAAA,EAArB,kBAAqB,CAArB,EAAoD;AAClDC,MAAAA,OAAO,CAAPA,gBAAAA,CAAAA,IAAAA,EAAAA,kBAAAA,EAAAA,OAAAA;AADF,KAAA,MAEO,IAAIW,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAJ,YAAA,EAA2C;AAChD,YAAM,IAAA,KAAA,CAAN,0HAAM,CAAN;AAGD;;AAED,WAAO,YAAM;AACX,UAAIZ,iBAAiB,CAAA,OAAA,EAArB,qBAAqB,CAArB,EAAuD;AACrDC,QAAAA,OAAO,CAAPA,mBAAAA,CAAAA,IAAAA,EAAAA,kBAAAA,EAAAA,OAAAA;AADF,OAAA,MAEO,IAAIW,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAJ,YAAA,EAA2C;AAChD,cAAM,IAAA,KAAA,CAAN,6HAAM,CAAN;AAGD;AAPH,KAAA;AA1BFF,GAAAA,EAmCG,CAAA,OAAA,EAAA,YAAA,EAAA,MAAA,EAAA,SAAA,EAnCHA,IAmCG,CAnCHA;AAzBK,CAAA","sourcesContent":["import * as React from 'react';\n\nimport { EventHandler, EventListenerOptions, EventTypes, Target } from './types';\n\nconst isActionSupported = (\n  element: Target | null | undefined,\n  method: 'addEventListener' | 'removeEventListener',\n): element is Target => (element ? !!element[method] : false);\n\nexport const useEventListener = <T extends EventTypes>(options: EventListenerOptions<T>): void => {\n  const { capture, listener, type, target, targetRef } = options;\n\n  const latestListener = React.useRef<EventHandler<T>>(listener);\n  latestListener.current = listener;\n\n  const eventHandler = React.useCallback((event: DocumentEventMap[T]) => {\n    return latestListener.current(event);\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // This is fine to violate there conditional rule as environment variables will never change during component\n    // lifecycle\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (typeof target !== 'undefined' && typeof targetRef !== 'undefined') {\n        throw new Error('`target` and `targetRef` props are mutually exclusive, please use one of them.');\n      }\n\n      if (typeof target === 'undefined' && typeof targetRef === 'undefined') {\n        throw new Error(\"`target` and `targetRef` props are `undefined`, it' required to use one of them.\");\n      }\n    }, [target, targetRef]);\n  }\n\n  React.useEffect(() => {\n    const element: Target | null | undefined = typeof targetRef === 'undefined' ? target : targetRef.current;\n\n    // Store the current event to avoid triggering handlers immediately\n    // Note this depends on a deprecated but extremely well supported quirk of the web platform\n    // https://github.com/facebook/react/issues/20074\n    let currentEvent = window.event;\n\n    const conditionalHandler = (event: DocumentEventMap[T]) => {\n      // Skip if this event is the same as the one running when we added the handlers\n      if (event === currentEvent) {\n        currentEvent = undefined;\n        return;\n      }\n\n      eventHandler(event);\n    };\n\n    if (isActionSupported(element, 'addEventListener')) {\n      element.addEventListener(type, conditionalHandler, capture);\n    } else if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        '@fluentui/react-component-event-listener: Passed `element` is not valid or does not support `addEventListener()` method.',\n      );\n    }\n\n    return () => {\n      if (isActionSupported(element, 'removeEventListener')) {\n        element.removeEventListener(type, conditionalHandler, capture);\n      } else if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\n          '@fluentui/react-component-event-listener: Passed `element` is not valid or does not support `removeEventListener()` method.',\n        );\n      }\n    };\n  }, [capture, eventHandler, target, targetRef, type]);\n};\n"]},"metadata":{},"sourceType":"module"}