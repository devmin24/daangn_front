{"ast":null,"code":"module.exports = curry;\n/*\n  function add(a, b, c) {\n    return a + b + c;\n  }\n  curry(add)(1)(2)(3); // 6\n  curry(add)(1)(2)(2); // 5\n  curry(add)(2)(4, 3); // 9\n\n  function add(...args) {\n    return args.reduce((sum, n) => sum + n, 0)\n  }\n  var curryAdd4 = curry(add, 4)\n  curryAdd4(1)(2, 3)(4); // 10\n\n  function converter(ratio, input) {\n    return (input*ratio).toFixed(1);\n  }\n  const curriedConverter = curry(converter)\n  const milesToKm = curriedConverter(1.62);\n  milesToKm(35); // 56.7\n  milesToKm(10); // 16.2\n*/\n\nfunction curry(fn, arity) {\n  return function curried() {\n    if (arity == null) {\n      arity = fn.length;\n    }\n\n    var args = [].slice.call(arguments);\n\n    if (args.length >= arity) {\n      return fn.apply(this, args);\n    } else {\n      return function () {\n        return curried.apply(this, args.concat([].slice.call(arguments)));\n      };\n    }\n  };\n}","map":{"version":3,"sources":["/Users/parkminkyung/sparta_react/daangnmarket/node_modules/just-curry-it/index.js"],"names":["module","exports","curry","fn","arity","curried","length","args","slice","call","arguments","apply","concat"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,KAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,KAAT,CAAeC,EAAf,EAAmBC,KAAnB,EAA0B;AACxB,SAAO,SAASC,OAAT,GAAmB;AACxB,QAAID,KAAK,IAAI,IAAb,EAAmB;AACjBA,MAAAA,KAAK,GAAGD,EAAE,CAACG,MAAX;AACD;;AACD,QAAIC,IAAI,GAAG,GAAGC,KAAH,CAASC,IAAT,CAAcC,SAAd,CAAX;;AACA,QAAIH,IAAI,CAACD,MAAL,IAAeF,KAAnB,EAA0B;AACxB,aAAOD,EAAE,CAACQ,KAAH,CAAS,IAAT,EAAeJ,IAAf,CAAP;AACD,KAFD,MAEO;AACL,aAAO,YAAW;AAChB,eAAOF,OAAO,CAACM,KAAR,CAAc,IAAd,EAAoBJ,IAAI,CAACK,MAAL,CAAY,GAAGJ,KAAH,CAASC,IAAT,CAAcC,SAAd,CAAZ,CAApB,CAAP;AACD,OAFD;AAGD;AACF,GAZD;AAaD","sourcesContent":["module.exports = curry;\n\n/*\n  function add(a, b, c) {\n    return a + b + c;\n  }\n  curry(add)(1)(2)(3); // 6\n  curry(add)(1)(2)(2); // 5\n  curry(add)(2)(4, 3); // 9\n\n  function add(...args) {\n    return args.reduce((sum, n) => sum + n, 0)\n  }\n  var curryAdd4 = curry(add, 4)\n  curryAdd4(1)(2, 3)(4); // 10\n\n  function converter(ratio, input) {\n    return (input*ratio).toFixed(1);\n  }\n  const curriedConverter = curry(converter)\n  const milesToKm = curriedConverter(1.62);\n  milesToKm(35); // 56.7\n  milesToKm(10); // 16.2\n*/\n\nfunction curry(fn, arity) {\n  return function curried() {\n    if (arity == null) {\n      arity = fn.length;\n    }\n    var args = [].slice.call(arguments);\n    if (args.length >= arity) {\n      return fn.apply(this, args);\n    } else {\n      return function() {\n        return curried.apply(this, args.concat([].slice.call(arguments)));\n      };\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"script"}