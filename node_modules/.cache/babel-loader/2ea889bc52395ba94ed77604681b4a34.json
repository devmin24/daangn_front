{"ast":null,"code":"/**\n * The function that correctly handles passing refs.\n *\n * @param ref - An ref object or function\n * @param node - A node that should be passed by ref\n */\nexport var handleRef = function handleRef(ref, node) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof ref === 'string') {\n      throw new Error('We do not support refs as string, this is a legacy API and will be likely to be removed in one of the future releases of React.');\n    }\n  }\n\n  if (typeof ref === 'function') {\n    ref(node);\n    return;\n  }\n\n  if (ref !== null && typeof ref === 'object') {\n    // The `current` property is defined as readonly, however it's a valid way because\n    // `ref` is a mutable object\n    ref.current = node;\n  }\n};\n/** Checks that the passed object is a valid React ref object. */\n\nexport var isRefObject = function isRefObject(ref) {\n  return (// https://github.com/facebook/react/blob/v16.8.2/packages/react-reconciler/src/ReactFiberCommitWork.js#L665\n    ref !== null && typeof ref === 'object' && ref.hasOwnProperty('current')\n  );\n};","map":{"version":3,"sources":["utils.ts"],"names":["handleRef","process","ref","isRefObject"],"mappings":"AAaA;;;;;;AAMA,OAAO,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAAA,GAAA,EAAA,IAAA,EAA+C;AACtE,MAAIC,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAJ,YAAA,EAA2C;AACzC,QAAI,OAAA,GAAA,KAAJ,QAAA,EAA6B;AAC3B,YAAM,IAAA,KAAA,CAAN,iIAAM,CAAN;AAGD;AACF;;AAED,MAAI,OAAA,GAAA,KAAJ,UAAA,EAA+B;AAC7BC,IAAAA,GAAG,CAAHA,IAAG,CAAHA;AACA;AACD;;AAED,MAAIA,GAAG,KAAHA,IAAAA,IAAgB,OAAA,GAAA,KAApB,QAAA,EAA6C;AAC3C;AACA;AACCA,IAAAA,GAAD,CAAA,OAACA,GAAD,IAACA;AACF;AAlBI,CAAA;AAqBP;;AACA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAA,GAAA,EAAA;AAAA,SACzB;AACAD,IAAAA,GAAG,KAAHA,IAAAA,IAAgB,OAAA,GAAA,KAAhBA,QAAAA,IAA2CA,GAAG,CAAHA,cAAAA,CAAAA,SAAAA;AAFlB;AAApB,CAAA","sourcesContent":["import * as React from 'react';\n\nexport interface RefProps {\n  children: React.ReactElement;\n\n  /**\n   * Called when a child component will be mounted or updated.\n   *\n   * @param node - Referred node.\n   */\n  innerRef: React.Ref<HTMLElement>;\n}\n\n/**\n * The function that correctly handles passing refs.\n *\n * @param ref - An ref object or function\n * @param node - A node that should be passed by ref\n */\nexport const handleRef = <N>(ref: React.Ref<N> | undefined, node: N) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof ref === 'string') {\n      throw new Error(\n        'We do not support refs as string, this is a legacy API and will be likely to be removed in one of the future releases of React.',\n      );\n    }\n  }\n\n  if (typeof ref === 'function') {\n    ref(node);\n    return;\n  }\n\n  if (ref !== null && typeof ref === 'object') {\n    // The `current` property is defined as readonly, however it's a valid way because\n    // `ref` is a mutable object\n    (ref as React.MutableRefObject<N>).current = node;\n  }\n};\n\n/** Checks that the passed object is a valid React ref object. */\nexport const isRefObject = (ref: any): ref is React.RefObject<any> =>\n  // https://github.com/facebook/react/blob/v16.8.2/packages/react-reconciler/src/ReactFiberCommitWork.js#L665\n  ref !== null && typeof ref === 'object' && ref.hasOwnProperty('current');\n"]},"metadata":{},"sourceType":"module"}