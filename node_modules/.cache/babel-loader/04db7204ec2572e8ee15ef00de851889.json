{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A PopupContent displays the content body of a Popover.\n */\n\nexport default function PopupContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('content', className);\n  var rest = getUnhandledProps(PopupContent, props);\n  var ElementType = getElementType(PopupContent, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\nPopupContent.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nPopupContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** The content of the Popup */\n  children: PropTypes.node,\n\n  /** Classes to add to the Popup content className. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nPopupContent.create = createShorthandFactory(PopupContent, function (children) {\n  return {\n    children: children\n  };\n});","map":{"version":3,"sources":["/Users/parkminkyung/sparta_react/daangnmarket/node_modules/semantic-ui-react/dist/es/modules/Popup/PopupContent.js"],"names":["_extends","cx","PropTypes","React","childrenUtils","createShorthandFactory","customPropTypes","getElementType","getUnhandledProps","PopupContent","props","children","className","content","classes","rest","ElementType","createElement","isNil","handledProps","propTypes","process","env","NODE_ENV","as","elementType","node","string","contentShorthand","create"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,EAAP,MAAe,MAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,sBAAxB,EAAgDC,eAAhD,EAAiEC,cAAjE,EAAiFC,iBAAjF,QAA0G,WAA1G;AACA;AACA;AACA;;AAEA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC1C,MAAIC,QAAQ,GAAGD,KAAK,CAACC,QAArB;AAAA,MACIC,SAAS,GAAGF,KAAK,CAACE,SADtB;AAAA,MAEIC,OAAO,GAAGH,KAAK,CAACG,OAFpB;AAGA,MAAIC,OAAO,GAAGb,EAAE,CAAC,SAAD,EAAYW,SAAZ,CAAhB;AACA,MAAIG,IAAI,GAAGP,iBAAiB,CAACC,YAAD,EAAeC,KAAf,CAA5B;AACA,MAAIM,WAAW,GAAGT,cAAc,CAACE,YAAD,EAAeC,KAAf,CAAhC;AACA,SAAO,aAAaP,KAAK,CAACc,aAAN,CAAoBD,WAApB,EAAiChB,QAAQ,CAAC,EAAD,EAAKe,IAAL,EAAW;AACtEH,IAAAA,SAAS,EAAEE;AAD2D,GAAX,CAAzC,EAEhBV,aAAa,CAACc,KAAd,CAAoBP,QAApB,IAAgCE,OAAhC,GAA0CF,QAF1B,CAApB;AAGD;AACDF,YAAY,CAACU,YAAb,GAA4B,CAAC,IAAD,EAAO,UAAP,EAAmB,WAAnB,EAAgC,SAAhC,CAA5B;AACAV,YAAY,CAACW,SAAb,GAAyBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AAC/D;AACAC,EAAAA,EAAE,EAAEtB,SAAS,CAACuB,WAFiD;;AAI/D;AACAd,EAAAA,QAAQ,EAAET,SAAS,CAACwB,IAL2C;;AAO/D;AACAd,EAAAA,SAAS,EAAEV,SAAS,CAACyB,MAR0C;;AAU/D;AACAd,EAAAA,OAAO,EAAEP,eAAe,CAACsB;AAXsC,CAAxC,GAYrB,EAZJ;AAaAnB,YAAY,CAACoB,MAAb,GAAsBxB,sBAAsB,CAACI,YAAD,EAAe,UAAUE,QAAV,EAAoB;AAC7E,SAAO;AACLA,IAAAA,QAAQ,EAAEA;AADL,GAAP;AAGD,CAJ2C,CAA5C","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A PopupContent displays the content body of a Popover.\n */\n\nexport default function PopupContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('content', className);\n  var rest = getUnhandledProps(PopupContent, props);\n  var ElementType = getElementType(PopupContent, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\nPopupContent.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nPopupContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** The content of the Popup */\n  children: PropTypes.node,\n\n  /** Classes to add to the Popup content className. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nPopupContent.create = createShorthandFactory(PopupContent, function (children) {\n  return {\n    children: children\n  };\n});"]},"metadata":{},"sourceType":"module"}