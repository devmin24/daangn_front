{"ast":null,"code":"import isMap from './isMap';\nexport default function ownKeys(object) {\n  if (isMap(object)) {\n    // We are using loose transforms in babel. Here we are trying to convert an\n    // interable to an array. Loose mode expects everything to already be an\n    // array. The problem is that our eslint rules encourage us to prefer\n    // spread over Array.from.\n    //\n    // Instead of disabling loose mode we simply disable the warning.\n    // eslint-disable-next-line unicorn/prefer-spread\n    return Array.from(object.keys());\n  }\n\n  if (typeof Reflect !== 'undefined' && typeof Reflect.ownKeys === 'function') {\n    return Reflect.ownKeys(object);\n  }\n\n  var keys = Object.getOwnPropertyNames(object);\n\n  if (typeof Object.getOwnPropertySymbols === 'function') {\n    keys = keys.concat(Object.getOwnPropertySymbols(object));\n  }\n\n  return keys;\n}","map":{"version":3,"sources":["/Users/parkminkyung/sparta_react/daangnmarket/node_modules/redux-actions/es/utils/ownKeys.js"],"names":["isMap","ownKeys","object","Array","from","keys","Reflect","Object","getOwnPropertyNames","getOwnPropertySymbols","concat"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,SAAlB;AACA,eAAe,SAASC,OAAT,CAAiBC,MAAjB,EAAyB;AACtC,MAAIF,KAAK,CAACE,MAAD,CAAT,EAAmB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAOC,KAAK,CAACC,IAAN,CAAWF,MAAM,CAACG,IAAP,EAAX,CAAP;AACD;;AAED,MAAI,OAAOC,OAAP,KAAmB,WAAnB,IAAkC,OAAOA,OAAO,CAACL,OAAf,KAA2B,UAAjE,EAA6E;AAC3E,WAAOK,OAAO,CAACL,OAAR,CAAgBC,MAAhB,CAAP;AACD;;AAED,MAAIG,IAAI,GAAGE,MAAM,CAACC,mBAAP,CAA2BN,MAA3B,CAAX;;AAEA,MAAI,OAAOK,MAAM,CAACE,qBAAd,KAAwC,UAA5C,EAAwD;AACtDJ,IAAAA,IAAI,GAAGA,IAAI,CAACK,MAAL,CAAYH,MAAM,CAACE,qBAAP,CAA6BP,MAA7B,CAAZ,CAAP;AACD;;AAED,SAAOG,IAAP;AACD","sourcesContent":["import isMap from './isMap';\nexport default function ownKeys(object) {\n  if (isMap(object)) {\n    // We are using loose transforms in babel. Here we are trying to convert an\n    // interable to an array. Loose mode expects everything to already be an\n    // array. The problem is that our eslint rules encourage us to prefer\n    // spread over Array.from.\n    //\n    // Instead of disabling loose mode we simply disable the warning.\n    // eslint-disable-next-line unicorn/prefer-spread\n    return Array.from(object.keys());\n  }\n\n  if (typeof Reflect !== 'undefined' && typeof Reflect.ownKeys === 'function') {\n    return Reflect.ownKeys(object);\n  }\n\n  var keys = Object.getOwnPropertyNames(object);\n\n  if (typeof Object.getOwnPropertySymbols === 'function') {\n    keys = keys.concat(Object.getOwnPropertySymbols(object));\n  }\n\n  return keys;\n}"]},"metadata":{},"sourceType":"module"}