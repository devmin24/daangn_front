{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _isNil from \"lodash-es/isNil\";\nimport _get from \"lodash-es/get\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React, { createElement } from 'react';\nimport { childrenUtils, createHTMLLabel, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useWidthProp } from '../../lib';\nimport Label from '../../elements/Label';\nimport Checkbox from '../../modules/Checkbox';\nimport Radio from '../../addons/Radio';\n/**\n * A field is a form element containing a label and an input.\n * @see Form\n * @see Button\n * @see Checkbox\n * @see Dropdown\n * @see Input\n * @see Radio\n * @see Select\n * @see Visibility\n */\n\nfunction FormField(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      control = props.control,\n      disabled = props.disabled,\n      error = props.error,\n      inline = props.inline,\n      label = props.label,\n      required = props.required,\n      type = props.type,\n      width = props.width,\n      id = props.id;\n  var classes = cx(useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(inline, 'inline'), useKeyOnly(required, 'required'), useWidthProp(width, 'wide'), 'field', className);\n  var rest = getUnhandledProps(FormField, props);\n  var ElementType = getElementType(FormField, props);\n\n  var errorPointing = _get(error, 'pointing', 'above');\n\n  var errorLabel = Label.create(error, {\n    autoGenerateKey: false,\n    defaultProps: {\n      prompt: true,\n      pointing: errorPointing,\n      id: id ? id + \"-error-message\" : undefined,\n      role: 'alert',\n      'aria-atomic': true\n    }\n  });\n  var errorLabelBefore = (errorPointing === 'below' || errorPointing === 'right') && errorLabel;\n  var errorLabelAfter = (errorPointing === 'above' || errorPointing === 'left') && errorLabel; // ----------------------------------------\n  // No Control\n  // ----------------------------------------\n\n  if (_isNil(control)) {\n    if (_isNil(label)) {\n      return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n        className: classes,\n        id: id\n      }), childrenUtils.isNil(children) ? content : children);\n    }\n\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes,\n      id: id\n    }), errorLabelBefore, createHTMLLabel(label, {\n      autoGenerateKey: false\n    }), errorLabelAfter);\n  } // ----------------------------------------\n  // Checkbox/Radio Control\n  // ----------------------------------------\n\n\n  var ariaDescribedBy = id && error ? id + \"-error-message\" : null;\n  var ariaAttrs = {\n    'aria-describedby': ariaDescribedBy,\n    'aria-invalid': error ? true : undefined\n  };\n\n  var controlProps = _extends({}, rest, {\n    content: content,\n    children: children,\n    disabled: disabled,\n    required: required,\n    type: type,\n    id: id\n  }); // wrap HTML checkboxes/radios in the label\n\n\n  if (control === 'input' && (type === 'checkbox' || type === 'radio')) {\n    return /*#__PURE__*/React.createElement(ElementType, {\n      className: classes\n    }, /*#__PURE__*/React.createElement(\"label\", null, errorLabelBefore, /*#__PURE__*/createElement(control, _extends({}, ariaAttrs, controlProps)), \" \", label, errorLabelAfter));\n  } // pass label prop to controls that support it\n\n\n  if (control === Checkbox || control === Radio) {\n    return /*#__PURE__*/React.createElement(ElementType, {\n      className: classes\n    }, errorLabelBefore, /*#__PURE__*/createElement(control, _extends({}, ariaAttrs, controlProps, {\n      label: label\n    })), errorLabelAfter);\n  } // ----------------------------------------\n  // Other Control\n  // ----------------------------------------\n\n\n  return /*#__PURE__*/React.createElement(ElementType, {\n    className: classes\n  }, createHTMLLabel(label, {\n    defaultProps: {\n      htmlFor: id\n    },\n    autoGenerateKey: false\n  }), errorLabelBefore, /*#__PURE__*/createElement(control, _extends({}, ariaAttrs, controlProps)), errorLabelAfter);\n}\n\nFormField.handledProps = [\"as\", \"children\", \"className\", \"content\", \"control\", \"disabled\", \"error\", \"id\", \"inline\", \"label\", \"required\", \"type\", \"width\"];\nFormField.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /**\n   * A form control component (i.e. Dropdown) or HTML tagName (i.e. 'input').\n   * Extra FormField props are passed to the control component.\n   * Mutually exclusive with children.\n   */\n  control: PropTypes.oneOfType([PropTypes.elementType, PropTypes.oneOf(['button', 'input', 'select', 'textarea'])]),\n\n  /** Individual fields may be disabled. */\n  disabled: PropTypes.bool,\n\n  /** Individual fields may display an error state along with a message. */\n  error: PropTypes.oneOfType([PropTypes.bool, customPropTypes.itemShorthand]),\n\n  /** The id of the control */\n  id: PropTypes.string,\n\n  /** A field can have its label next to instead of above it. */\n  inline: PropTypes.bool,\n  // Heads Up!\n  // Do not disallow children with `label` shorthand\n  // The `control` might accept a `label` prop and `children`\n\n  /** Mutually exclusive with children. */\n  label: PropTypes.oneOfType([PropTypes.node, PropTypes.object]),\n\n  /** A field can show that input is mandatory. */\n  required: PropTypes.bool,\n\n  /** Passed to the control component (i.e. <input type='password' />) */\n  type: customPropTypes.every([customPropTypes.demand(['control']) // don't strictly validate HTML types\n  // a control might be passed that uses a `type` prop with unknown values\n  // let the control validate if for us\n  ]),\n\n  /** A field can specify its width in grid columns */\n  width: PropTypes.oneOf(SUI.WIDTHS)\n} : {};\nexport default FormField;","map":{"version":3,"sources":["/Users/parkminkyung/sparta_react/daangnmarket/node_modules/semantic-ui-react/dist/es/collections/Form/FormField.js"],"names":["_extends","_isNil","_get","cx","PropTypes","React","createElement","childrenUtils","createHTMLLabel","customPropTypes","getElementType","getUnhandledProps","SUI","useKeyOnly","useWidthProp","Label","Checkbox","Radio","FormField","props","children","className","content","control","disabled","error","inline","label","required","type","width","id","classes","rest","ElementType","errorPointing","errorLabel","create","autoGenerateKey","defaultProps","prompt","pointing","undefined","role","errorLabelBefore","errorLabelAfter","isNil","ariaDescribedBy","ariaAttrs","controlProps","htmlFor","handledProps","propTypes","process","env","NODE_ENV","as","elementType","node","string","contentShorthand","oneOfType","oneOf","bool","itemShorthand","object","every","demand","WIDTHS"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _isNil from \"lodash-es/isNil\";\nimport _get from \"lodash-es/get\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React, { createElement } from 'react';\nimport { childrenUtils, createHTMLLabel, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useWidthProp } from '../../lib';\nimport Label from '../../elements/Label';\nimport Checkbox from '../../modules/Checkbox';\nimport Radio from '../../addons/Radio';\n/**\n * A field is a form element containing a label and an input.\n * @see Form\n * @see Button\n * @see Checkbox\n * @see Dropdown\n * @see Input\n * @see Radio\n * @see Select\n * @see Visibility\n */\n\nfunction FormField(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      control = props.control,\n      disabled = props.disabled,\n      error = props.error,\n      inline = props.inline,\n      label = props.label,\n      required = props.required,\n      type = props.type,\n      width = props.width,\n      id = props.id;\n  var classes = cx(useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(inline, 'inline'), useKeyOnly(required, 'required'), useWidthProp(width, 'wide'), 'field', className);\n  var rest = getUnhandledProps(FormField, props);\n  var ElementType = getElementType(FormField, props);\n\n  var errorPointing = _get(error, 'pointing', 'above');\n\n  var errorLabel = Label.create(error, {\n    autoGenerateKey: false,\n    defaultProps: {\n      prompt: true,\n      pointing: errorPointing,\n      id: id ? id + \"-error-message\" : undefined,\n      role: 'alert',\n      'aria-atomic': true\n    }\n  });\n  var errorLabelBefore = (errorPointing === 'below' || errorPointing === 'right') && errorLabel;\n  var errorLabelAfter = (errorPointing === 'above' || errorPointing === 'left') && errorLabel; // ----------------------------------------\n  // No Control\n  // ----------------------------------------\n\n  if (_isNil(control)) {\n    if (_isNil(label)) {\n      return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n        className: classes,\n        id: id\n      }), childrenUtils.isNil(children) ? content : children);\n    }\n\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes,\n      id: id\n    }), errorLabelBefore, createHTMLLabel(label, {\n      autoGenerateKey: false\n    }), errorLabelAfter);\n  } // ----------------------------------------\n  // Checkbox/Radio Control\n  // ----------------------------------------\n\n\n  var ariaDescribedBy = id && error ? id + \"-error-message\" : null;\n  var ariaAttrs = {\n    'aria-describedby': ariaDescribedBy,\n    'aria-invalid': error ? true : undefined\n  };\n\n  var controlProps = _extends({}, rest, {\n    content: content,\n    children: children,\n    disabled: disabled,\n    required: required,\n    type: type,\n    id: id\n  }); // wrap HTML checkboxes/radios in the label\n\n\n  if (control === 'input' && (type === 'checkbox' || type === 'radio')) {\n    return /*#__PURE__*/React.createElement(ElementType, {\n      className: classes\n    }, /*#__PURE__*/React.createElement(\"label\", null, errorLabelBefore, /*#__PURE__*/createElement(control, _extends({}, ariaAttrs, controlProps)), \" \", label, errorLabelAfter));\n  } // pass label prop to controls that support it\n\n\n  if (control === Checkbox || control === Radio) {\n    return /*#__PURE__*/React.createElement(ElementType, {\n      className: classes\n    }, errorLabelBefore, /*#__PURE__*/createElement(control, _extends({}, ariaAttrs, controlProps, {\n      label: label\n    })), errorLabelAfter);\n  } // ----------------------------------------\n  // Other Control\n  // ----------------------------------------\n\n\n  return /*#__PURE__*/React.createElement(ElementType, {\n    className: classes\n  }, createHTMLLabel(label, {\n    defaultProps: {\n      htmlFor: id\n    },\n    autoGenerateKey: false\n  }), errorLabelBefore, /*#__PURE__*/createElement(control, _extends({}, ariaAttrs, controlProps)), errorLabelAfter);\n}\n\nFormField.handledProps = [\"as\", \"children\", \"className\", \"content\", \"control\", \"disabled\", \"error\", \"id\", \"inline\", \"label\", \"required\", \"type\", \"width\"];\nFormField.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /**\n   * A form control component (i.e. Dropdown) or HTML tagName (i.e. 'input').\n   * Extra FormField props are passed to the control component.\n   * Mutually exclusive with children.\n   */\n  control: PropTypes.oneOfType([PropTypes.elementType, PropTypes.oneOf(['button', 'input', 'select', 'textarea'])]),\n\n  /** Individual fields may be disabled. */\n  disabled: PropTypes.bool,\n\n  /** Individual fields may display an error state along with a message. */\n  error: PropTypes.oneOfType([PropTypes.bool, customPropTypes.itemShorthand]),\n\n  /** The id of the control */\n  id: PropTypes.string,\n\n  /** A field can have its label next to instead of above it. */\n  inline: PropTypes.bool,\n  // Heads Up!\n  // Do not disallow children with `label` shorthand\n  // The `control` might accept a `label` prop and `children`\n\n  /** Mutually exclusive with children. */\n  label: PropTypes.oneOfType([PropTypes.node, PropTypes.object]),\n\n  /** A field can show that input is mandatory. */\n  required: PropTypes.bool,\n\n  /** Passed to the control component (i.e. <input type='password' />) */\n  type: customPropTypes.every([customPropTypes.demand(['control']) // don't strictly validate HTML types\n  // a control might be passed that uses a `type` prop with unknown values\n  // let the control validate if for us\n  ]),\n\n  /** A field can specify its width in grid columns */\n  width: PropTypes.oneOf(SUI.WIDTHS)\n} : {};\nexport default FormField;"]},"metadata":{},"sourceType":"module"}