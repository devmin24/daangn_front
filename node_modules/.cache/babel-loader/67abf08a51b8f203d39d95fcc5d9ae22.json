{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _isUndefined from \"lodash-es/isUndefined\";\nimport _startsWith from \"lodash-es/startsWith\";\nimport _filter from \"lodash-es/filter\";\nimport _isEmpty from \"lodash-es/isEmpty\";\nimport _keys from \"lodash-es/keys\";\nimport _intersection from \"lodash-es/intersection\";\nimport _has from \"lodash-es/has\";\nimport _each from \"lodash-es/each\";\nimport _invoke from \"lodash-es/invoke\";\nimport React from 'react';\n\nvar getDefaultPropName = function getDefaultPropName(prop) {\n  return \"default\" + (prop[0].toUpperCase() + prop.slice(1));\n};\n/**\n * Return the auto controlled state value for a give prop. The initial value is chosen in this order:\n *  - regular props\n *  - then, default props\n *  - then, initial state\n *  - then, `checked` defaults to false\n *  - then, `value` defaults to '' or [] if props.multiple\n *  - else, undefined\n *\n *  @param {string} propName A prop name\n *  @param {object} [props] A props object\n *  @param {object} [state] A state object\n *  @param {boolean} [includeDefaults=false] Whether or not to heed the default props or initial state\n */\n\n\nvar getAutoControlledStateValue = function getAutoControlledStateValue(propName, props, state, includeDefaults) {\n  if (includeDefaults === void 0) {\n    includeDefaults = false;\n  } // regular props\n\n\n  var propValue = props[propName];\n  if (propValue !== undefined) return propValue;\n\n  if (includeDefaults) {\n    // defaultProps\n    var defaultProp = props[getDefaultPropName(propName)];\n    if (defaultProp !== undefined) return defaultProp; // initial state - state may be null or undefined\n\n    if (state) {\n      var initialState = state[propName];\n      if (initialState !== undefined) return initialState;\n    }\n  } // React doesn't allow changing from uncontrolled to controlled components,\n  // default checked/value if they were not present.\n\n\n  if (propName === 'checked') return false;\n  if (propName === 'value') return props.multiple ? [] : ''; // otherwise, undefined\n};\n\nvar ModernAutoControlledComponent = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(ModernAutoControlledComponent, _React$Component);\n\n  function ModernAutoControlledComponent() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    var _this$constructor = _this.constructor,\n        autoControlledProps = _this$constructor.autoControlledProps,\n        getAutoControlledStateFromProps = _this$constructor.getAutoControlledStateFromProps;\n    var state = _invoke(_assertThisInitialized(_this), 'getInitialAutoControlledState', _this.props) || {};\n\n    if (process.env.NODE_ENV !== 'production') {\n      var _this$constructor2 = _this.constructor,\n          defaultProps = _this$constructor2.defaultProps,\n          name = _this$constructor2.name,\n          propTypes = _this$constructor2.propTypes,\n          getDerivedStateFromProps = _this$constructor2.getDerivedStateFromProps; // require usage of getAutoControlledStateFromProps()\n\n      if (getDerivedStateFromProps !== ModernAutoControlledComponent.getDerivedStateFromProps) {\n        /* eslint-disable-next-line no-console */\n        console.error(\"Auto controlled \" + name + \" must specify a static getAutoControlledStateFromProps() instead of getDerivedStateFromProps().\");\n      } // require propTypes\n\n\n      _each(autoControlledProps, function (prop) {\n        var defaultProp = getDefaultPropName(prop); // regular prop\n\n        if (!_has(propTypes, defaultProp)) {\n          console.error(name + \" is missing \\\"\" + defaultProp + \"\\\" propTypes validation for auto controlled prop \\\"\" + prop + \"\\\".\");\n        } // its default prop\n\n\n        if (!_has(propTypes, prop)) {\n          console.error(name + \" is missing propTypes validation for auto controlled prop \\\"\" + prop + \"\\\".\");\n        }\n      }); // prevent autoControlledProps in defaultProps\n      //\n      // When setting state, auto controlled props values always win (so the parent can manage them).\n      // It is not reasonable to decipher the difference between props from the parent and defaultProps.\n      // Allowing defaultProps results in trySetState always deferring to the defaultProp value.\n      // Auto controlled props also listed in defaultProps can never be updated.\n      //\n      // To set defaults for an AutoControlled prop, you can set the initial state in the\n      // constructor or by using an ES7 property initializer:\n      // https://babeljs.io/blog/2015/06/07/react-on-es6-plus#property-initializers\n\n\n      var illegalDefaults = _intersection(autoControlledProps, _keys(defaultProps));\n\n      if (!_isEmpty(illegalDefaults)) {\n        console.error(['Do not set defaultProps for autoControlledProps. You can set defaults by', 'setting state in the constructor or using an ES7 property initializer', '(https://babeljs.io/blog/2015/06/07/react-on-es6-plus#property-initializers)', \"See \" + name + \" props: \\\"\" + illegalDefaults + \"\\\".\"].join(' '));\n      } // prevent listing defaultProps in autoControlledProps\n      //\n      // Default props are automatically handled.\n      // Listing defaults in autoControlledProps would result in allowing defaultDefaultValue props.\n\n\n      var illegalAutoControlled = _filter(autoControlledProps, function (prop) {\n        return _startsWith(prop, 'default');\n      });\n\n      if (!_isEmpty(illegalAutoControlled)) {\n        console.error(['Do not add default props to autoControlledProps.', 'Default props are automatically handled.', \"See \" + name + \" autoControlledProps: \\\"\" + illegalAutoControlled + \"\\\".\"].join(' '));\n      }\n    } // Auto controlled props are copied to state.\n    // Set initial state by copying auto controlled props to state.\n    // Also look for the default prop for any auto controlled props (foo => defaultFoo)\n    // so we can set initial values from defaults.\n\n\n    var initialAutoControlledState = autoControlledProps.reduce(function (acc, prop) {\n      acc[prop] = getAutoControlledStateValue(prop, _this.props, state, true);\n\n      if (process.env.NODE_ENV !== 'production') {\n        var defaultPropName = getDefaultPropName(prop);\n        var _name = _this.constructor.name; // prevent defaultFoo={} along side foo={}\n\n        if (!_isUndefined(_this.props[defaultPropName]) && !_isUndefined(_this.props[prop])) {\n          console.error(_name + \" prop \\\"\" + prop + \"\\\" is auto controlled. Specify either \" + defaultPropName + \" or \" + prop + \", but not both.\");\n        }\n      }\n\n      return acc;\n    }, {});\n    _this.state = _extends({}, state, initialAutoControlledState, {\n      autoControlledProps: autoControlledProps,\n      getAutoControlledStateFromProps: getAutoControlledStateFromProps\n    });\n    return _this;\n  }\n\n  ModernAutoControlledComponent.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {\n    var autoControlledProps = state.autoControlledProps,\n        getAutoControlledStateFromProps = state.getAutoControlledStateFromProps; // Solve the next state for autoControlledProps\n\n    var newStateFromProps = autoControlledProps.reduce(function (acc, prop) {\n      var isNextDefined = !_isUndefined(props[prop]); // if next is defined then use its value\n\n      if (isNextDefined) acc[prop] = props[prop];\n      return acc;\n    }, {}); // Due to the inheritance of the AutoControlledComponent we should call its\n    // getAutoControlledStateFromProps() and merge it with the existing state\n\n    if (getAutoControlledStateFromProps) {\n      var computedState = getAutoControlledStateFromProps(props, _extends({}, state, newStateFromProps), state); // We should follow the idea of getDerivedStateFromProps() and return only modified state\n\n      return _extends({}, newStateFromProps, computedState);\n    }\n\n    return newStateFromProps;\n  }\n  /**\n   * Override this method to use getDerivedStateFromProps() in child components.\n   */\n  ;\n\n  ModernAutoControlledComponent.getAutoControlledStateFromProps = function getAutoControlledStateFromProps() {\n    return null;\n  };\n\n  return ModernAutoControlledComponent;\n}(React.Component);\n\nexport { ModernAutoControlledComponent as default };","map":{"version":3,"sources":["/Users/parkminkyung/sparta_react/daangnmarket/node_modules/semantic-ui-react/dist/es/lib/ModernAutoControlledComponent.js"],"names":["_extends","_assertThisInitialized","_inheritsLoose","_isUndefined","_startsWith","_filter","_isEmpty","_keys","_intersection","_has","_each","_invoke","React","getDefaultPropName","prop","toUpperCase","slice","getAutoControlledStateValue","propName","props","state","includeDefaults","propValue","undefined","defaultProp","initialState","multiple","ModernAutoControlledComponent","_React$Component","_this","_len","arguments","length","args","Array","_key","call","apply","concat","_this$constructor","constructor","autoControlledProps","getAutoControlledStateFromProps","process","env","NODE_ENV","_this$constructor2","defaultProps","name","propTypes","getDerivedStateFromProps","console","error","illegalDefaults","join","illegalAutoControlled","initialAutoControlledState","reduce","acc","defaultPropName","_name","newStateFromProps","isNextDefined","computedState","Component","default"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,sBAAP,MAAmC,kDAAnC;AACA,OAAOC,cAAP,MAA2B,0CAA3B;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,aAAP,MAA0B,wBAA1B;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,IAAIC,kBAAkB,GAAG,SAASA,kBAAT,CAA4BC,IAA5B,EAAkC;AACzD,SAAO,aAAaA,IAAI,CAAC,CAAD,CAAJ,CAAQC,WAAR,KAAwBD,IAAI,CAACE,KAAL,CAAW,CAAX,CAArC,CAAP;AACD,CAFD;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAIC,2BAA2B,GAAG,SAASA,2BAAT,CAAqCC,QAArC,EAA+CC,KAA/C,EAAsDC,KAAtD,EAA6DC,eAA7D,EAA8E;AAC9G,MAAIA,eAAe,KAAK,KAAK,CAA7B,EAAgC;AAC9BA,IAAAA,eAAe,GAAG,KAAlB;AACD,GAH6G,CAK9G;;;AACA,MAAIC,SAAS,GAAGH,KAAK,CAACD,QAAD,CAArB;AACA,MAAII,SAAS,KAAKC,SAAlB,EAA6B,OAAOD,SAAP;;AAE7B,MAAID,eAAJ,EAAqB;AACnB;AACA,QAAIG,WAAW,GAAGL,KAAK,CAACN,kBAAkB,CAACK,QAAD,CAAnB,CAAvB;AACA,QAAIM,WAAW,KAAKD,SAApB,EAA+B,OAAOC,WAAP,CAHZ,CAGgC;;AAEnD,QAAIJ,KAAJ,EAAW;AACT,UAAIK,YAAY,GAAGL,KAAK,CAACF,QAAD,CAAxB;AACA,UAAIO,YAAY,KAAKF,SAArB,EAAgC,OAAOE,YAAP;AACjC;AACF,GAlB6G,CAkB5G;AACF;;;AAGA,MAAIP,QAAQ,KAAK,SAAjB,EAA4B,OAAO,KAAP;AAC5B,MAAIA,QAAQ,KAAK,OAAjB,EAA0B,OAAOC,KAAK,CAACO,QAAN,GAAiB,EAAjB,GAAsB,EAA7B,CAvBoF,CAuBnD;AAC5D,CAxBD;;AA0BA,IAAIC,6BAA6B,GAAG,aAAa,UAAUC,gBAAV,EAA4B;AAC3E1B,EAAAA,cAAc,CAACyB,6BAAD,EAAgCC,gBAAhC,CAAd;;AAEA,WAASD,6BAAT,GAAyC;AACvC,QAAIE,KAAJ;;AAEA,SAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAG,IAAIC,KAAJ,CAAUJ,IAAV,CAApC,EAAqDK,IAAI,GAAG,CAAjE,EAAoEA,IAAI,GAAGL,IAA3E,EAAiFK,IAAI,EAArF,EAAyF;AACvFF,MAAAA,IAAI,CAACE,IAAD,CAAJ,GAAaJ,SAAS,CAACI,IAAD,CAAtB;AACD;;AAEDN,IAAAA,KAAK,GAAGD,gBAAgB,CAACQ,IAAjB,CAAsBC,KAAtB,CAA4BT,gBAA5B,EAA8C,CAAC,IAAD,EAAOU,MAAP,CAAcL,IAAd,CAA9C,KAAsE,IAA9E;AACA,QAAIM,iBAAiB,GAAGV,KAAK,CAACW,WAA9B;AAAA,QACIC,mBAAmB,GAAGF,iBAAiB,CAACE,mBAD5C;AAAA,QAEIC,+BAA+B,GAAGH,iBAAiB,CAACG,+BAFxD;AAGA,QAAItB,KAAK,GAAGT,OAAO,CAACV,sBAAsB,CAAC4B,KAAD,CAAvB,EAAgC,+BAAhC,EAAiEA,KAAK,CAACV,KAAvE,CAAP,IAAwF,EAApG;;AAEA,QAAIwB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAIC,kBAAkB,GAAGjB,KAAK,CAACW,WAA/B;AAAA,UACIO,YAAY,GAAGD,kBAAkB,CAACC,YADtC;AAAA,UAEIC,IAAI,GAAGF,kBAAkB,CAACE,IAF9B;AAAA,UAGIC,SAAS,GAAGH,kBAAkB,CAACG,SAHnC;AAAA,UAIIC,wBAAwB,GAAGJ,kBAAkB,CAACI,wBAJlD,CADyC,CAKmC;;AAE5E,UAAIA,wBAAwB,KAAKvB,6BAA6B,CAACuB,wBAA/D,EAAyF;AACvF;AACAC,QAAAA,OAAO,CAACC,KAAR,CAAc,qBAAqBJ,IAArB,GAA4B,iGAA1C;AACD,OAVwC,CAUvC;;;AAGFtC,MAAAA,KAAK,CAAC+B,mBAAD,EAAsB,UAAU3B,IAAV,EAAgB;AACzC,YAAIU,WAAW,GAAGX,kBAAkB,CAACC,IAAD,CAApC,CADyC,CACG;;AAE5C,YAAI,CAACL,IAAI,CAACwC,SAAD,EAAYzB,WAAZ,CAAT,EAAmC;AACjC2B,UAAAA,OAAO,CAACC,KAAR,CAAcJ,IAAI,GAAG,gBAAP,GAA0BxB,WAA1B,GAAwC,qDAAxC,GAAgGV,IAAhG,GAAuG,KAArH;AACD,SALwC,CAKvC;;;AAGF,YAAI,CAACL,IAAI,CAACwC,SAAD,EAAYnC,IAAZ,CAAT,EAA4B;AAC1BqC,UAAAA,OAAO,CAACC,KAAR,CAAcJ,IAAI,GAAG,8DAAP,GAAwElC,IAAxE,GAA+E,KAA7F;AACD;AACF,OAXI,CAAL,CAbyC,CAwBrC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,UAAIuC,eAAe,GAAG7C,aAAa,CAACiC,mBAAD,EAAsBlC,KAAK,CAACwC,YAAD,CAA3B,CAAnC;;AAEA,UAAI,CAACzC,QAAQ,CAAC+C,eAAD,CAAb,EAAgC;AAC9BF,QAAAA,OAAO,CAACC,KAAR,CAAc,CAAC,0EAAD,EAA6E,uEAA7E,EAAsJ,8EAAtJ,EAAsO,SAASJ,IAAT,GAAgB,YAAhB,GAA+BK,eAA/B,GAAiD,KAAvR,EAA8RC,IAA9R,CAAmS,GAAnS,CAAd;AACD,OAxCwC,CAwCvC;AACF;AACA;AACA;;;AAGA,UAAIC,qBAAqB,GAAGlD,OAAO,CAACoC,mBAAD,EAAsB,UAAU3B,IAAV,EAAgB;AACvE,eAAOV,WAAW,CAACU,IAAD,EAAO,SAAP,CAAlB;AACD,OAFkC,CAAnC;;AAIA,UAAI,CAACR,QAAQ,CAACiD,qBAAD,CAAb,EAAsC;AACpCJ,QAAAA,OAAO,CAACC,KAAR,CAAc,CAAC,kDAAD,EAAqD,0CAArD,EAAiG,SAASJ,IAAT,GAAgB,0BAAhB,GAA6CO,qBAA7C,GAAqE,KAAtK,EAA6KD,IAA7K,CAAkL,GAAlL,CAAd;AACD;AACF,KAlEsC,CAkErC;AACF;AACA;AACA;;;AAGA,QAAIE,0BAA0B,GAAGf,mBAAmB,CAACgB,MAApB,CAA2B,UAAUC,GAAV,EAAe5C,IAAf,EAAqB;AAC/E4C,MAAAA,GAAG,CAAC5C,IAAD,CAAH,GAAYG,2BAA2B,CAACH,IAAD,EAAOe,KAAK,CAACV,KAAb,EAAoBC,KAApB,EAA2B,IAA3B,CAAvC;;AAEA,UAAIuB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,YAAIc,eAAe,GAAG9C,kBAAkB,CAACC,IAAD,CAAxC;AACA,YAAI8C,KAAK,GAAG/B,KAAK,CAACW,WAAN,CAAkBQ,IAA9B,CAFyC,CAEL;;AAEpC,YAAI,CAAC7C,YAAY,CAAC0B,KAAK,CAACV,KAAN,CAAYwC,eAAZ,CAAD,CAAb,IAA+C,CAACxD,YAAY,CAAC0B,KAAK,CAACV,KAAN,CAAYL,IAAZ,CAAD,CAAhE,EAAqF;AACnFqC,UAAAA,OAAO,CAACC,KAAR,CAAcQ,KAAK,GAAG,UAAR,GAAqB9C,IAArB,GAA4B,wCAA5B,GAAuE6C,eAAvE,GAAyF,MAAzF,GAAkG7C,IAAlG,GAAyG,iBAAvH;AACD;AACF;;AAED,aAAO4C,GAAP;AACD,KAbgC,EAa9B,EAb8B,CAAjC;AAcA7B,IAAAA,KAAK,CAACT,KAAN,GAAcpB,QAAQ,CAAC,EAAD,EAAKoB,KAAL,EAAYoC,0BAAZ,EAAwC;AAC5Df,MAAAA,mBAAmB,EAAEA,mBADuC;AAE5DC,MAAAA,+BAA+B,EAAEA;AAF2B,KAAxC,CAAtB;AAIA,WAAOb,KAAP;AACD;;AAEDF,EAAAA,6BAA6B,CAACuB,wBAA9B,GAAyD,SAASA,wBAAT,CAAkC/B,KAAlC,EAAyCC,KAAzC,EAAgD;AACvG,QAAIqB,mBAAmB,GAAGrB,KAAK,CAACqB,mBAAhC;AAAA,QACIC,+BAA+B,GAAGtB,KAAK,CAACsB,+BAD5C,CADuG,CAE1B;;AAE7E,QAAImB,iBAAiB,GAAGpB,mBAAmB,CAACgB,MAApB,CAA2B,UAAUC,GAAV,EAAe5C,IAAf,EAAqB;AACtE,UAAIgD,aAAa,GAAG,CAAC3D,YAAY,CAACgB,KAAK,CAACL,IAAD,CAAN,CAAjC,CADsE,CACtB;;AAEhD,UAAIgD,aAAJ,EAAmBJ,GAAG,CAAC5C,IAAD,CAAH,GAAYK,KAAK,CAACL,IAAD,CAAjB;AACnB,aAAO4C,GAAP;AACD,KALuB,EAKrB,EALqB,CAAxB,CAJuG,CAS/F;AACR;;AAEA,QAAIhB,+BAAJ,EAAqC;AACnC,UAAIqB,aAAa,GAAGrB,+BAA+B,CAACvB,KAAD,EAAQnB,QAAQ,CAAC,EAAD,EAAKoB,KAAL,EAAYyC,iBAAZ,CAAhB,EAAgDzC,KAAhD,CAAnD,CADmC,CACwE;;AAE3G,aAAOpB,QAAQ,CAAC,EAAD,EAAK6D,iBAAL,EAAwBE,aAAxB,CAAf;AACD;;AAED,WAAOF,iBAAP;AACD;AACD;AACF;AACA;AAtBE;;AAyBAlC,EAAAA,6BAA6B,CAACe,+BAA9B,GAAgE,SAASA,+BAAT,GAA2C;AACzG,WAAO,IAAP;AACD,GAFD;;AAIA,SAAOf,6BAAP;AACD,CA9HgD,CA8H/Cf,KAAK,CAACoD,SA9HyC,CAAjD;;AAgIA,SAASrC,6BAA6B,IAAIsC,OAA1C","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _isUndefined from \"lodash-es/isUndefined\";\nimport _startsWith from \"lodash-es/startsWith\";\nimport _filter from \"lodash-es/filter\";\nimport _isEmpty from \"lodash-es/isEmpty\";\nimport _keys from \"lodash-es/keys\";\nimport _intersection from \"lodash-es/intersection\";\nimport _has from \"lodash-es/has\";\nimport _each from \"lodash-es/each\";\nimport _invoke from \"lodash-es/invoke\";\nimport React from 'react';\n\nvar getDefaultPropName = function getDefaultPropName(prop) {\n  return \"default\" + (prop[0].toUpperCase() + prop.slice(1));\n};\n/**\n * Return the auto controlled state value for a give prop. The initial value is chosen in this order:\n *  - regular props\n *  - then, default props\n *  - then, initial state\n *  - then, `checked` defaults to false\n *  - then, `value` defaults to '' or [] if props.multiple\n *  - else, undefined\n *\n *  @param {string} propName A prop name\n *  @param {object} [props] A props object\n *  @param {object} [state] A state object\n *  @param {boolean} [includeDefaults=false] Whether or not to heed the default props or initial state\n */\n\n\nvar getAutoControlledStateValue = function getAutoControlledStateValue(propName, props, state, includeDefaults) {\n  if (includeDefaults === void 0) {\n    includeDefaults = false;\n  }\n\n  // regular props\n  var propValue = props[propName];\n  if (propValue !== undefined) return propValue;\n\n  if (includeDefaults) {\n    // defaultProps\n    var defaultProp = props[getDefaultPropName(propName)];\n    if (defaultProp !== undefined) return defaultProp; // initial state - state may be null or undefined\n\n    if (state) {\n      var initialState = state[propName];\n      if (initialState !== undefined) return initialState;\n    }\n  } // React doesn't allow changing from uncontrolled to controlled components,\n  // default checked/value if they were not present.\n\n\n  if (propName === 'checked') return false;\n  if (propName === 'value') return props.multiple ? [] : ''; // otherwise, undefined\n};\n\nvar ModernAutoControlledComponent = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(ModernAutoControlledComponent, _React$Component);\n\n  function ModernAutoControlledComponent() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    var _this$constructor = _this.constructor,\n        autoControlledProps = _this$constructor.autoControlledProps,\n        getAutoControlledStateFromProps = _this$constructor.getAutoControlledStateFromProps;\n    var state = _invoke(_assertThisInitialized(_this), 'getInitialAutoControlledState', _this.props) || {};\n\n    if (process.env.NODE_ENV !== 'production') {\n      var _this$constructor2 = _this.constructor,\n          defaultProps = _this$constructor2.defaultProps,\n          name = _this$constructor2.name,\n          propTypes = _this$constructor2.propTypes,\n          getDerivedStateFromProps = _this$constructor2.getDerivedStateFromProps; // require usage of getAutoControlledStateFromProps()\n\n      if (getDerivedStateFromProps !== ModernAutoControlledComponent.getDerivedStateFromProps) {\n        /* eslint-disable-next-line no-console */\n        console.error(\"Auto controlled \" + name + \" must specify a static getAutoControlledStateFromProps() instead of getDerivedStateFromProps().\");\n      } // require propTypes\n\n\n      _each(autoControlledProps, function (prop) {\n        var defaultProp = getDefaultPropName(prop); // regular prop\n\n        if (!_has(propTypes, defaultProp)) {\n          console.error(name + \" is missing \\\"\" + defaultProp + \"\\\" propTypes validation for auto controlled prop \\\"\" + prop + \"\\\".\");\n        } // its default prop\n\n\n        if (!_has(propTypes, prop)) {\n          console.error(name + \" is missing propTypes validation for auto controlled prop \\\"\" + prop + \"\\\".\");\n        }\n      }); // prevent autoControlledProps in defaultProps\n      //\n      // When setting state, auto controlled props values always win (so the parent can manage them).\n      // It is not reasonable to decipher the difference between props from the parent and defaultProps.\n      // Allowing defaultProps results in trySetState always deferring to the defaultProp value.\n      // Auto controlled props also listed in defaultProps can never be updated.\n      //\n      // To set defaults for an AutoControlled prop, you can set the initial state in the\n      // constructor or by using an ES7 property initializer:\n      // https://babeljs.io/blog/2015/06/07/react-on-es6-plus#property-initializers\n\n\n      var illegalDefaults = _intersection(autoControlledProps, _keys(defaultProps));\n\n      if (!_isEmpty(illegalDefaults)) {\n        console.error(['Do not set defaultProps for autoControlledProps. You can set defaults by', 'setting state in the constructor or using an ES7 property initializer', '(https://babeljs.io/blog/2015/06/07/react-on-es6-plus#property-initializers)', \"See \" + name + \" props: \\\"\" + illegalDefaults + \"\\\".\"].join(' '));\n      } // prevent listing defaultProps in autoControlledProps\n      //\n      // Default props are automatically handled.\n      // Listing defaults in autoControlledProps would result in allowing defaultDefaultValue props.\n\n\n      var illegalAutoControlled = _filter(autoControlledProps, function (prop) {\n        return _startsWith(prop, 'default');\n      });\n\n      if (!_isEmpty(illegalAutoControlled)) {\n        console.error(['Do not add default props to autoControlledProps.', 'Default props are automatically handled.', \"See \" + name + \" autoControlledProps: \\\"\" + illegalAutoControlled + \"\\\".\"].join(' '));\n      }\n    } // Auto controlled props are copied to state.\n    // Set initial state by copying auto controlled props to state.\n    // Also look for the default prop for any auto controlled props (foo => defaultFoo)\n    // so we can set initial values from defaults.\n\n\n    var initialAutoControlledState = autoControlledProps.reduce(function (acc, prop) {\n      acc[prop] = getAutoControlledStateValue(prop, _this.props, state, true);\n\n      if (process.env.NODE_ENV !== 'production') {\n        var defaultPropName = getDefaultPropName(prop);\n        var _name = _this.constructor.name; // prevent defaultFoo={} along side foo={}\n\n        if (!_isUndefined(_this.props[defaultPropName]) && !_isUndefined(_this.props[prop])) {\n          console.error(_name + \" prop \\\"\" + prop + \"\\\" is auto controlled. Specify either \" + defaultPropName + \" or \" + prop + \", but not both.\");\n        }\n      }\n\n      return acc;\n    }, {});\n    _this.state = _extends({}, state, initialAutoControlledState, {\n      autoControlledProps: autoControlledProps,\n      getAutoControlledStateFromProps: getAutoControlledStateFromProps\n    });\n    return _this;\n  }\n\n  ModernAutoControlledComponent.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {\n    var autoControlledProps = state.autoControlledProps,\n        getAutoControlledStateFromProps = state.getAutoControlledStateFromProps; // Solve the next state for autoControlledProps\n\n    var newStateFromProps = autoControlledProps.reduce(function (acc, prop) {\n      var isNextDefined = !_isUndefined(props[prop]); // if next is defined then use its value\n\n      if (isNextDefined) acc[prop] = props[prop];\n      return acc;\n    }, {}); // Due to the inheritance of the AutoControlledComponent we should call its\n    // getAutoControlledStateFromProps() and merge it with the existing state\n\n    if (getAutoControlledStateFromProps) {\n      var computedState = getAutoControlledStateFromProps(props, _extends({}, state, newStateFromProps), state); // We should follow the idea of getDerivedStateFromProps() and return only modified state\n\n      return _extends({}, newStateFromProps, computedState);\n    }\n\n    return newStateFromProps;\n  }\n  /**\n   * Override this method to use getDerivedStateFromProps() in child components.\n   */\n  ;\n\n  ModernAutoControlledComponent.getAutoControlledStateFromProps = function getAutoControlledStateFromProps() {\n    return null;\n  };\n\n  return ModernAutoControlledComponent;\n}(React.Component);\n\nexport { ModernAutoControlledComponent as default };"]},"metadata":{},"sourceType":"module"}